#use "topfind";;
#require "unix";;
#load "r.cma";;
#load "oCamlR.cma";;

let _ = R.Raw.eval_string "library(quantmod)";;
let getSymbols = R.force (R.symbol "getSymbols");;

let fun_of_call : R.Raw.lang R.Raw.sxp -> R.Raw.sexp = R.Internal.inspect_listsxp_carval;;

let x  = R.Raw.parse_sexp "getSymbols(\"YHOO\")";;
let f  = fun_of_call x;;
let f' = R.Raw.sexp_of_t (R.findfun (Obj.magic f));;

let show = R.Internal.Pretty.t_of_sexp;;
let t = show x;;

open R.Internal.Pretty;;

(* Testing functions for reverse engineering. *)
open R.RevEngineering;;
let () = init_ocaml_node ();;
let s = sexp_allocate ();;
let () = write_promise s f';;
